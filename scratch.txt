Aug 11th, 2023
Directory: 'python-music-utils'

Created 3 different python modules:
- create a single directory
- create/rename a file
- download a pdf, rename it, and place it in a particular directory

=========================================================

Aug 12th, 2023

TODO:

=> DONE <= Create git repository for python-music-utils!!

Continue implementing functionality.
> Download zip file, rename each file in folder, place all files in a directory.
  - get url of imslp zip file
  - extract folder from zip file
  - iterate over files in folder
  - rename files
  - place files in a particular directory

> Create tests, make functionality more robust.

> Questions:
  - OCO -> Could we link to an external site from the sheet music page?
        -> I want direct access to the 'database'.
  - Opus -> Shall I figure out how to programmatically upload music to google drive? YES.

=========================================================

Aug 18, 2023

Reviewing work so far for UPLOAD FUNCTIONALITY...

Add quickstart.py:
- originally from Google's GCP API tutorial
  - learned how to access a user's Drive (mine) and list files
  - I've now commented out original try block...
- found a tutorial about various programmatic actions using python
  - https://codelikeadev.com/blog/google-drive-api-python
  - learning how to upload files from my local

TODO

=> DONE <= need to hide credentials in environment variable or database (start with environment variable)
=> DONE <= need to edit SCOPE to allow writing (uploading files to drive)
  - changed SCOPE by deleting "metadata.readonly" from end of googleapis url
  - deleted token.json since SCOPE has changed; will be re-created upon next run
=> DONE <= Test file upload ==> SUCCESS!!!
  - oboes.pdf was uploaded to my Drive

Google's client id/secrets/other OAuth 2.0 parameters format:
https://developers.google.com/api-client-library/dotnet/guide/aaa_client_secrets

InstalledAppFlow usage examples (client config, app authentication...):
https://www.programcreek.com/python/example/124839/google_auth_oauthlib.flow.InstalledAppFlow.from_client_config


=> DONE <= Experimentation with service account auth (instead of user account):
- It works, but I didn't realize that the file is uploaded to the service account's Google Drive account,
  NOT my personal Google Drive. Can share a service account folder with my personal account,
  but I'd rather stick with the user account way of uploading files so that
  I can see the files in my UI, automatically, upon uploading.

=> CONFIRMING USER ACCT METHOD <= Going with user account oauth.


NEXT:

- create a folder in Google Drive. Useful resource that includes creating folders:
  https://thepythoncode.com/article/using-google-drive--api-in-python
- add upload files to folder
- connect file download from IMSLP to file upload to Drive
- download IMSLP zip of parts, rename, store in folder, upload folder to Drive

=========================================================

Aug 30, 2023

DOWNLOAD FUNCTIONALITY COMPLETED: (must manually login to imslp first)
- Enter command: python download_part.py <url-of-part-hyperlink>
- part is downloaded to local, renamed based on part name in url
Modules involved: download_part.py, get_cookies.py, part_name_formatter.py
Exceptions are included. Still need tests.

=========================================================

Aug 31, 2023

TODO:
- clean up code later....
=> DONE <= research workarounds for these two OS alerts:
  ->  security wants to use your confidential information stored in "Chrome Safe Storage" in your keychain.
      To allow this, enter the "login" keychain password. [Always Allow, Deny, Allow]
  ->  security wants to access key "Chrome Safe Storage" in your keychain.
      To allow this, enter the "login" keychain password. [Always Allow, Deny, Allow]
  - going to run download_part.py and see if I have the option to select 'Always Allow'
    when prompted by the two messages above...
    YES! => Was given the first prompt, typed in password, selected 'Always Allow'. No second prompt.

Sept 1, 2023

IMPORTANT TO REMEMBER:
- Keychain access: At 'Chrome Safe Storage' keychain prompt, instruct user to enter OS user password
  and select 'Always Allow'. If user is not comfortable with this option, may select 'Allow' and simply respond
  to the prompt each time user triggers a download. 'Deny' will terminate the download process.
- User will be prompted by google oauth to allow python-music-utils app full access their drive.

TODO:
=> DONE <= See if there is a SCOPE that can limit app to specifically reading and writing (not deleting).
  -> Using scope 'drive.file'. Allows reading, editing, creating and deleting files and folders.

Sept 5, 2023

IMPORTANT TO REMEMBER:
- Drive owner will be prompted to allow the python-music-utils app view/edit/create/delete access:
  - only to files/folders that the app creates -- no access to resources created via the web UI.

TODO:
=> DONE <= Determine if the user authorization flow occurs every time, or just the first time.
  -> Only the first time. If I change the scope, app must go through authorization flow again.

- CLEAN UP QUICKSTART.PY and rename with a more descriptive name.
- Figure out how to create folders...
- Create a root folder, 'IMSLP-App', to hold all further app-created folders
- Figure out how to view folders.